{"version":3,"sources":["webpack://Layer5/./src/components/Learn-Components/Card-Component/learn-card.style.js","webpack://Layer5/./src/components/Learn-Components/Card-Component/index.js","webpack://Layer5/./src/components/image.js","webpack://Layer5/./src/reusecore/PageHeader/pageHeader.style.js","webpack://Layer5/./src/reusecore/PageHeader/index.js","webpack://Layer5/./src/sections/Blog/Blog-grid/blogGrid.style.js","webpack://Layer5/./src/sections/Learn-Layer5/Courses-List/courseslist.style.js","webpack://Layer5/./src/sections/Learn-Layer5/Courses-List/index.js","webpack://Layer5/./src/utils/slugify.js"],"names":["styled","tutorial","link","Link","to","fields","learnpath","className","style","backgroundColor","frontmatter","themeColor","title","courseTitle","status","description","learningPaths","cardImage","alt","childImageSharp","extension","publicURL","rest","G","image","gatsbyImageData","src","authorField","author","isSlugAvailable","slugify","name","category","subtitle","thumbnail","useStaticQuery","allMdx","nodes","some","matter","imgStyle","objectFit","key","BlogPageWrapper","LearnPathWrapper","coursesData","console","log","data","theme","Navigation","PageHeader","Button","url","map","index","sm","md","xl","course","Footer","module","exports","text","toString","toLowerCase","replace"],"mappings":"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","file":"component---src-sections-learn-layer-5-courses-list-index-js-0fac8e3da3473545d791.js","sourcesContent":["import styled from \"styled-components\";\n\nconst CardWrapper = styled.div`\n    max-width:375px;\n    min-height: 335px;\n    margin: auto;\n    border-radius: 1rem;\n\n    .card-link{\n        color: black;\n    }\n\n    .card-parent{\n        border-radius: 2rem;\n    }\n\n    .card-head{\n        display: flex;\n        padding: 1rem;\n        span{\n            background-color: white;\n            border-radius : 1rem;\n            padding: 0 0.6rem;\n            font-size:0.8rem;\n        }\n    }\n\n    .card-desc{\n        padding: 0 1rem;\n        p{\n            font-size: 1rem;\n        }\n    \n    }\n    .card-image{\n        text-align: center;\n        \n        img{\n            height: 100px;\n            width: auto;\n            padding: 1rem;\n        }\n    }\n\n    @media(max-width: 1300px){\n        margin: 1rem auto;\n    }\n`;\n\nexport default CardWrapper;","import React from \"react\";\nimport CardWrapper from \"./learn-card.style\";\nimport Image from \"../../image\";\nimport { Link } from \"gatsby\";\n\nconst CardComponent = ({tutorial,link}) => {\n\n  return (\n    <CardWrapper>\n      <Link to={link?link:tutorial.fields.learnpath} className='card-link'>\n        <div style={{backgroundColor:tutorial.frontmatter.themeColor}} className=\"card-parent\">\n          <div>\n            <div className=\"card-head\">\n              <h3>{tutorial.frontmatter.title ? tutorial.frontmatter.title : tutorial.frontmatter.courseTitle}</h3>\n              {\n                tutorial.frontmatter.status ? <p><span>New</span></p>:null\n              }\n            </div>\n            <div className=\"card-desc\">\n              <p>{tutorial.frontmatter.description}</p>\n              <p>{tutorial.frontmatter.learningPaths} learning paths</p>  \n            </div>\n            \n          </div>\n          <div className=\"card-image\">\n            <Image {...tutorial.frontmatter.cardImage} alt={tutorial.frontmatter.title} />\n          </div>\n        </div>\n      </Link>\n    </CardWrapper>\n  );\n};\n\nexport default CardComponent;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\n\nconst Image = ({ childImageSharp, extension, publicURL, alt, ...rest }) => {\n  if (!childImageSharp && extension === \"svg\") {\n    return (\n      <div className=\"old-gatsby-image-wrapper\">\n        <img src={publicURL} alt={alt} />\n      </div>\n    );\n  } else {\n    return <GatsbyImage image={childImageSharp.gatsbyImageData} {...rest} alt={alt} />;\n  }\n};\n\nexport default Image;\n","import styled from \"styled-components\";\n\n\nconst PageHeaderWrapper = styled.div`\n        position: relative;\n        overflow: hidden;\n        z-index:1;\n        .page-header {\n            text-align: center;\n            position: relative;\n            height: auto;\n            margin: 3rem auto;\n            padding: 0 1rem 0;\n            z-index: 99;\n            h1 {\n                padding-top: 3rem;\n            }\n        }\n        \n        .feature-image{\n            margin: 2rem auto;\n            max-height: 62.5rem;\n            max-width: 31rem;\n            object-fit: contain;    \n        }\n        .breadcrumbs {\n            display: flex;\n            justify-content: center;\n            margin-top: 1.5rem;  \n            h5 {\n                display: inline-block;\n                margin:0 0.4rem;\n                opacity: .7;\n            }\n            p{\n                margin: 0;\n                display: inline-block;\n            }\n        } \n    }\n`;\n\nexport default PageHeaderWrapper;\n","import React from \"react\";\nimport {Link, graphql, useStaticQuery} from \"gatsby\";\n\nimport slugify from \"../../utils/slugify\";\nimport PageHeaderWrapper from \"./pageHeader.style\";\nimport Image from \"../../components/image\";\n\nconst authorField = (author, isSlugAvailable) => {\n  return(\n    <>\n      {\n        isSlugAvailable ?\n          <Link to={`/community/members/${slugify(author.name)}`}>\n            <span>{author.name}</span>\n          </Link>\n          : <span>{author.name}</span>\n      }\n    </>\n  );\n};\n\nconst PageHeader = ({ category, title, subtitle,  author, thumbnail }) => {\n  let isSlugAvailable = false;\n  if(author){\n    const validMembers = useStaticQuery(\n      graphql`\n                query validMemberss{\n                    allMdx(\n                        filter:{ \n                            fields:{ collection:{eq:\"members\"} }\n                        }\n                    ) {\n                        nodes {\n                            frontmatter {\n                                name\n                            }\n                        }\n                    }\n                }\n            `\n    );\n    isSlugAvailable = validMembers.allMdx.nodes.some(matter => matter.frontmatter.name == author.name);\n  }\n  return (\n    <PageHeaderWrapper>\n      <div className=\"page-header\">\n        { thumbnail && <div className=\"feature-image\">\n          <Image {...thumbnail} imgStyle={{ objectFit: \"contain\"}} alt={title}/>\n        </div>}\n        <h1 className=\"page-title\">{title}</h1>\n        {subtitle && (<h3>{subtitle}</h3>)}\n        {category && (\n          <div className=\"breadcrumbs\">\n            <span>\n              <h5>Category:</h5>\n              <p key={category}>\n                <Link to={`/blog/category/${slugify(category)}`}>\n                  <span>{category}</span>\n                </Link>\n              </p>\n            </span>\n            {author && (\n              <>\n                <span>\n                  <h5>By:</h5>\n                  <p>{authorField(author, isSlugAvailable)}</p>\n                </span>\n              </>\n            )}\n          </div>\n        )}\n        {!category && author && (\n          <div className=\"breadcrumbs post\">\n            <h5>By:</h5>\n            <span>{authorField(author, isSlugAvailable)}</span>\n          </div>\n        )}\n        {/*{!author && path && (*/}\n        {/*    <div className=\"breadcrumbs page\">*/}\n        {/*        <>*/}\n        {/*            <span> Home </span> <span> {\">\"} </span> {path}*/}\n        {/*        </>*/}\n        {/*    </div>*/}\n        {/*)}*/}\n      </div>\n    </PageHeaderWrapper>\n  );\n};\nexport default PageHeader;\n","import styled from \"styled-components\";\nexport const BlogPageWrapper = styled.div`\n\n    .blog-grid-wrapper{\n        margin: 5rem auto;\n    }\n\n    @media only screen and (max-width: 992px) {\n        .blog-page-wrapper{\n            margin-bottom: 5rem;\n        }\n    }\n\n    @media only screen and (max-width: 575px) {\n        .blog-grid-wrapper{\n            margin: 0 auto 5rem;\n        }\n    }\n`;\n","import styled from \"styled-components\";\nimport { BlogPageWrapper } from \"../../Blog/Blog-grid/blogGrid.style\";\nexport const LearnPathWrapper = styled.div`\n    ${BlogPageWrapper};\n    .course-list-cont {\n        padding: 5rem; \n        button{\n            margin: 2rem;\n        }\n    }\n\n`;\n","import React from \"react\";\n// import Card from \"../../../components/Card\";\nimport {  Row, Col } from \"../../../reusecore/Layout\";\nimport PageHeader from \"../../../reusecore/PageHeader\";\nimport { graphql } from \"gatsby\";\nimport { LearnPathWrapper } from \"./courseslist.style\";\nimport CardComponent from \"../../../components/Learn-Components/Card-Component\";\nimport Button from \"../../../reusecore/Button\";\nimport Layout from \"../../../components/layout\";\nimport SEO from \"../../../components/seo\";\nimport Navigation from \"../../General/Navigation\";\nimport Footer from \"../../General/Footer\";\nimport { GlobalStyle } from \"../../app.style\";\nimport theme from \"../../../theme/app/themeStyles\";\nimport { ThemeProvider } from \"styled-components\";\n\nexport const query = graphql`\n  query CoursesBySlug($learnpath: String!) {\n    allMdx(\n      filter:{fields: {learnpath: {eq: $learnpath}},frontmatter:{docType:{eq:\"Course\"}}}\n        ) {\n        nodes{\n            id,\n            frontmatter{\n              courseTitle,\n              description,\n              themeColor,   \n              cardImage{\n                childImageSharp {\n                  gatsbyImageData(width: 200, layout: CONSTRAINED)\n                }\n                extension\n                publicURL\n              },\n            }\n            fields {\n                slug\n              course\n              learnpath\n            }\n          }\n        }\n      }`;\nconst LearningPathGrid = (coursesData) => {\n  console.log(coursesData.data);\n  return (\n    <ThemeProvider theme={theme}>\n      <Layout>\n        <GlobalStyle />\n        <SEO title=\"Learn Service Mesh\"\n          description=\"Learn Service Meshes: Istio, Linkerd, Envoy, Consul, Maesh, Kuma, App Mesh, Citrix, Tanzu Service Mesh\"\n          image=\"/images/workshops.png\" />\n        <Navigation />\n        <LearnPathWrapper>\n          <PageHeader title=\"Learn Layer5 Courses List\"/>\n          <div className=\"course-list-cont\">\n            <Button url=\"/learn-ng\" title=\"Go Back\" />\n            <Row className=\"learning-path-cards\">\n              {\n                coursesData.data.allMdx.nodes.map((tutorial,index) => (\n                  <Col sm={12} md={6} xl={4} key={index}>\n                    <CardComponent tutorial={tutorial} key={index} link={tutorial.fields.course}/>\n                  </Col>\n                ))\n              }\n            </Row>\n          </div>\n        </LearnPathWrapper>\n        \n        <Footer />\n      </Layout>\n    </ThemeProvider>\n    \n  );\n};\n\nexport default LearningPathGrid;\n","module.exports = function slugify (text) {\n    return text.toString().toLowerCase()\n        .replace(/\\s+/g, \"-\")           // Replace spaces with -\n        .replace(/[^\\w\\-]+/g, \"\")       // Remove all non-word chars\n        .replace(/\\-\\-+/g, \"-\")         // Replace multiple - with single -\n        .replace(/^-+/, \"\")             // Trim - from start of text\n        .replace(/-+$/, \"\");             // Trim - from end of text\n};\n\n"],"sourceRoot":""}