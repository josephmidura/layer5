{"version":3,"file":"1554-243c28d60752554db646.js","mappings":"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","sources":["webpack://Layer5/./src/sections/Meshery/Meshery-integrations/Honeycomb/Honeycomb.style.js","webpack://Layer5/./src/sections/Meshery/Meshery-integrations/Honeycomb/Honeycomb.js","webpack://Layer5/./src/sections/Meshery/Meshery-integrations/IntegrationsGrid.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const HoneycombGrid = styled.div`\n  display: flex;\n  text-align: left;\n  ul {\n    font-size: 0;\n    line-height: 0;\n    height: ${(props) =>\n  props.height === 0 ? \"unset\" : `calc(${props.height}px + 46px)`};\n    li {\n      width: 150px;\n      margin: 3px;\n      height: calc(150px * 1.1547);\n      display: inline-block;\n      font-size: initial;\n      margin-bottom: calc(3px - 150px * 0.2885);\n      filter: drop-shadow(rgba(0, 0, 0, 0.1) 0px 4px 20px);\n    }\n\n    ::before {\n      content: \"\";\n      width: calc(150px / 2 + 3px);\n      float: left;\n      height: 100%;\n      shape-outside: repeating-linear-gradient(\n        #0000 0 calc(calc(1.732 * 150px + 4 * 3px - 1px) - 3px),\n        #000 0 calc(1.732 * 150px + 4 * 3px - 1px)\n      );\n    }\n  }\n`;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { HoneycombGrid } from \"./Honeycomb.style\";\n\nconst Honeycomb = (props) => {\n  const { items, renderItem } = props;\n  const [height, setHeight] = useState(0);\n  const gridRef = useRef(null);\n\n  const setHoneycombHeight = () => {\n    // Total horizontal available space for hexagons\n    const availableWidth = gridRef\n      ? gridRef.current.offsetWidth\n      : window.innerWidth;\n\n    // No. of hexagons that can be adjusted in first and second row\n    let firstRow = Math.floor((availableWidth - 100) / 156); // a\n    let secondRow = Math.floor((availableWidth - 178) / 156); // b\n\n    // No. of first-second row pairs possible\n    let pairsCount = Math.floor(items.length / (firstRow + secondRow));\n\n    // If some integrations are not part of the pairs\n    if (pairsCount * (firstRow + secondRow) < items.length) {\n      // Calculate left off hexagons\n      const left = items.length - pairsCount * (firstRow + secondRow);\n\n      // If left hexagons count is less than or equal to number of hexagons that can be adjusted in first row -> Add only one hexagon row height to total height\n      if (left <= firstRow) {\n        setHeight(pairsCount * 272 + 130);\n      } else {\n        // If the left hexagons need be adjusted in 2 rows -> add 2 rows height to total height\n        setHeight(pairsCount * 272 + 272);\n      }\n    } else {\n      // All hexagons are covered in n pairs of 2 rows ( first row with a hexagons and second row with b hexagons )\n      !isNaN(pairsCount) && setHeight(pairsCount * 272);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", setHoneycombHeight);\n    setHoneycombHeight();\n    return () => {\n      window.removeEventListener(\"resize\", setHoneycombHeight);\n    };\n  }, [items]);\n\n  return (\n    <div>\n      <HoneycombGrid height={height}>\n        <ul ref={gridRef}>\n          {items.map((item, key) => (\n            <li key={key}>{renderItem(item)}</li>\n          ))}\n        </ul>\n      </HoneycombGrid>\n    </div>\n  );\n};\n\nconst Hexagon = (props) => {\n  return <div {...props}>{props.children}</div>;\n};\n\nexport { Honeycomb, Hexagon };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\nimport { HoneycombGrid, IntegrationSlider } from \"./Integration.style\";\nimport useDataList from \"../../../utils/usedataList\";\nimport SearchBox from \"../../../reusecore/Search\";\nimport EmptyResources from \"../../Resources/Resources-error/emptyStateTemplate\";\nimport { Honeycomb, Hexagon } from \"./Honeycomb/Honeycomb\";\nimport { useStyledDarkMode } from \"../../../theme/app/useStyledDarkMode\";\n\n\nconst IntegrationsGrid = ({ category, count }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMdx(\n        filter: {\n          fields: { collection: { eq: \"integrations\" } }\n          frontmatter: { published: { eq: true } }\n        }\n      ) {\n        nodes {\n          frontmatter {\n            title\n            status\n            category\n            integrationIcon {\n              childImageSharp {\n                gatsbyImageData(width: 500, layout: CONSTRAINED)\n              }\n              extension\n              publicURL\n            }\n            darkModeIntegrationIcon {\n              childImageSharp {\n                gatsbyImageData(width: 500, layout: CONSTRAINED)\n              }\n              extension\n              publicURL\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  `);\n\n  const settings = {\n    initialSlide: 0,\n    infinite: false,\n    slidesToShow: 5.25,\n    swipeToSlide: true,\n    slidesToScroll: 1,\n    // useTransform: false,\n\n    responsive: [\n      {\n        breakpoint: 900,\n        settings: {\n          initialSlide: 0,\n          infinite: false,\n          arrows: true,\n          slidesToShow: 3,\n        }\n      },\n      {\n        breakpoint: 500,\n        settings: {\n          initialSlide: 0,\n          arrows: true,\n          infinite: false,\n          slidesToShow: 1.5\n        }\n      }\n    ]\n  };\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { queryResults, searchData } = useDataList(\n    data.allMdx.nodes,\n    setSearchQuery,\n    searchQuery,\n    [\"frontmatter\", \"title\"],\n    [\"frontmatter\", \"title\"]\n  );\n  const [activeIntegrationList, setIntegrationList] = useState([]);\n  const [hideFilter, setHideFilter] = useState(false);\n  const allIntegrations = useRef(data.allMdx.nodes);\n  const { isDark } = useStyledDarkMode();\n\n  // fetch all the category names from activeIntegrationList and remove the duplicate category names\n  const categoryNames = allIntegrations.current.reduce(\n    (initCategory, integration) => {\n      if (!initCategory.includes(integration.frontmatter.category)) {\n        initCategory.push(integration.frontmatter.category);\n      }\n      return initCategory;\n    },\n    []\n  );\n\n  const categoryCount = (categoryName) => {\n    return allIntegrations.current.reduce((count, integration) => {\n      if (integration.frontmatter.category === categoryName) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  };\n\n  let [categoryNameList, setcategoryNameList] = useState([\n    {\n      id: -1,\n      name: \"All\",\n      isSelected: false,\n      count: allIntegrations.current.length,\n    },\n    ...categoryNames.map((categoryName) => {\n      return {\n        id: categoryName,\n        name: categoryName,\n        isSelected: false,\n        count: categoryCount(categoryName),\n      };\n    }),\n  ]);\n\n  useEffect(() => setCategory(), []);\n\n  useEffect(() => {\n    if (queryResults) {\n      setIntegrationList([...queryResults]);\n    }\n    if (searchQuery.length == 0) {\n      clearFilter();\n    }\n  }, [queryResults]);\n\n  const clearFilter = () => {\n    let tempCategoryList = [...categoryNameList];\n    const selectedCategory = category ?? \"All\";\n    tempCategoryList.forEach((item) => {\n      if (item.name != selectedCategory) {\n        item.isSelected = false;\n      } else {\n        item.isSelected = true;\n      }\n    });\n    setcategoryNameList([...tempCategoryList]);\n    setIntegrationCollection();\n  };\n\n  const setCategory = () => {\n    let tempCategoryList = [...categoryNameList];\n    if (category !== undefined) {\n      tempCategoryList.forEach((item) => {\n        if (item.name === category) {\n          item.isSelected = true;\n        }\n      });\n    } else {\n      tempCategoryList[0].isSelected = true;\n    }\n    setcategoryNameList([...tempCategoryList]);\n    setIntegrationCollection();\n  };\n\n  const setFilter = (event) => {\n    let count = 0;\n    let tempCategoryList = [...categoryNameList];\n    let selectedCategory = event.target.innerHTML.includes(\"&amp;\")\n      ? event.target.innerHTML.replace(\"&amp;\", \"&\")\n      : event.target.innerHTML;\n    selectedCategory = selectedCategory.split(\"(\")[0].trim();\n\n    if (selectedCategory === \"All\") {\n      tempCategoryList.forEach((item) => {\n        if (item.isSelected & (item.name != \"All\")) {\n          item.isSelected = false;\n        }\n      });\n    }\n\n    tempCategoryList.forEach((item) => {\n      if (item.name == selectedCategory) {\n        item.isSelected = !item.isSelected;\n      }\n      if (item.isSelected && item.name != \"All\") {\n        count++;\n      }\n    });\n\n    if (count === 0) {\n      tempCategoryList[0].isSelected = true;\n    } else {\n      tempCategoryList[0].isSelected = false;\n    }\n\n    setcategoryNameList([...tempCategoryList]);\n    setIntegrationCollection();\n  };\n\n  const setIntegrationCollection = () => {\n    if (categoryNameList[0].isSelected) {\n      setIntegrationList([...data.allMdx.nodes]);\n      return;\n    }\n    let tempIntegrationCollection = [];\n    categoryNameList.forEach((item) => {\n      if (item.isSelected) {\n        data.allMdx.nodes.forEach((integration) => {\n          if (integration.frontmatter.category == item.name) {\n            tempIntegrationCollection = [\n              ...tempIntegrationCollection,\n              integration,\n            ];\n          }\n        });\n      }\n    });\n    setIntegrationList([...tempIntegrationCollection]);\n  };\n\n  return (\n    <HoneycombGrid>\n      <section className=\"heading\">\n        <h1>\n          {Math.ceil(data.allMdx.nodes.length / 10) * 10}+ Built-In Integrations\n        </h1>\n        <h2>Support for your Cloud Native Infrastructure and Apps</h2>\n      </section>\n      <SearchBox\n        searchQuery={searchQuery}\n        searchData={searchData}\n        hideFilter={hideFilter}\n        setHideFilter={setHideFilter}\n        classnames={[\"integration-search\"]}\n      />\n\n      <section style={{ \"margin\": \"0 2.6rem\" }}>\n        <IntegrationSlider {...settings}>\n          {!hideFilter &&\n            categoryNameList.map((item) => {\n              return (\n                <p\n                  key={item.id}\n                  className={item.isSelected ? \"items selected\" : \"items\"}\n                  onClick={setFilter}\n                >\n                  {`${item.name} (${item.count})`}\n                </p>\n              );\n            })}\n        </IntegrationSlider>\n      </section>\n\n      {searchQuery.length > 0 && queryResults.length < 1 ? (\n        <EmptyResources\n          errorMessage={\"No matching integrations\"}\n          errorSubtitle={\"Try searching again.\"}\n        />\n      ) : (\n        <Honeycomb\n          items={\n            count == \"All\"\n              ? activeIntegrationList\n              : activeIntegrationList.slice(0, count)\n          }\n          renderItem={(item) => {\n            const status =\n              item.frontmatter.status === \"InProgress\" ? true : false;\n            const integrationIcon = item.frontmatter.integrationIcon.publicURL;\n            const darkModeIntegrationIcon =\n              item.frontmatter.integrationIcon;\n            if (status) {\n              return (\n                <Hexagon\n                  className=\"container-inactive\"\n                  style={{ background: \"#A0AAAA\" }}\n                >\n                  <span className=\"integration-container\">\n                    <img\n                      className=\"integration-icon\"\n                      src={\n                        isDark && darkModeIntegrationIcon !== null\n                          ? darkModeIntegrationIcon.publicURL\n                          : integrationIcon\n                      }\n                      alt={item.frontmatter.title}\n                      height={70}\n                      width={70}\n                      style={{ filter: \"brightness(0) invert(1)\" }}\n                      loading=\"lazy\"\n                    />\n                    <div className=\"integration-content\">\n                      <div className=\"title\" style={{ marginBottom: 0 }}>\n                        {item.frontmatter.title}\n                      </div>\n                    </div>\n                  </span>\n                </Hexagon>\n              );\n            } else {\n              return (\n                <Link\n                  to={`/cloud-native-management/meshery${item.fields.slug}`}\n                >\n                  <Hexagon className=\"container-active\">\n                    <span className=\"integration-container\">\n                      <img\n                        className=\"integration-icon\"\n                        src={\n                          isDark && darkModeIntegrationIcon !== null\n                            ? darkModeIntegrationIcon.publicURL\n                            : integrationIcon\n                        }\n                        alt={item.frontmatter.title}\n                        height={70}\n                        width={70}\n                        style={{\n                          filter:\n                            isDark && darkModeIntegrationIcon == null\n                              ? \"brightness(0) invert(1)\"\n                              : \"none\",\n                        }}\n                        loading=\"lazy\"\n                      />\n                      <div className=\"integration-content\">\n                        <div className=\"title\">{item.frontmatter.title}</div>\n                        {/* <Button\n                        secondary\n                        title=\"Learn More\"\n                        className=\"learnMoreBtn\"\n                      /> */}\n                      </div>\n                    </span>\n                  </Hexagon>\n                </Link>\n              );\n            }\n          }}\n        />\n      )}\n    </HoneycombGrid>\n  );\n};\n\nexport default IntegrationsGrid;\n"],"names":["HoneycombGrid","styled","props","height","Honeycomb","items","renderItem","setHeight","useState","gridRef","useRef","setHoneycombHeight","availableWidth","current","offsetWidth","window","innerWidth","firstRow","Math","floor","secondRow","pairsCount","length","left","isNaN","useEffect","addEventListener","removeEventListener","ref","map","item","key","Hexagon","children","category","count","data","useStaticQuery","settings","initialSlide","infinite","slidesToShow","swipeToSlide","slidesToScroll","responsive","breakpoint","arrows","searchQuery","setSearchQuery","queryResults","searchData","useDataList","allMdx","nodes","activeIntegrationList","setIntegrationList","hideFilter","setHideFilter","allIntegrations","isDark","useStyledDarkMode","categoryNames","reduce","initCategory","integration","includes","frontmatter","push","categoryCount","categoryName","categoryNameList","setcategoryNameList","id","name","isSelected","setCategory","clearFilter","tempCategoryList","selectedCategory","forEach","setIntegrationCollection","undefined","setFilter","event","target","innerHTML","replace","split","trim","tempIntegrationCollection","className","ceil","Search","classnames","style","onClick","errorMessage","errorSubtitle","slice","status","integrationIcon","publicURL","darkModeIntegrationIcon","background","src","alt","title","width","filter","loading","marginBottom","Link","to","fields","slug"],"sourceRoot":""}